server {
    listen 80;
    ### modify PORT prior to deployment (default 8443)
    return 301 https://$host:8443$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $host;

    ssl_certificate /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;

    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
        # forward the /validate request to Vouch Proxy
        proxy_pass http://vouch-proxy:9090/validate;

        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        ### AUTH REQUEST SET ###
        # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # optinally add X-Vouch-IdP-IdToken, X-Vouch-IdP-AccessToken or X-Vouch-IdP-RefreshToken
        auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;
        #auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
        #auth_request_set $auth_resp_x_vouch_idp_refreshtoken $upstream_http_x_vouch_idp_refreshtoken;

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        proxy_set_header Host $http_host;
        # redirect to Vouch Proxy for login
        return 302 http://$host:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
    }

    location /auth {
        # redirect to Vouch Proxy for authentication with OIDC client
        # Callback URL (relative to host) must be defined in both OIDC client and vouch/config
        proxy_pass http://vouch-proxy:9090/auth;
    }

    location /login {
        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;

        # redirect to Vouch Proxy for login
        proxy_pass http://vouch-proxy:9090/login?url=$scheme://$http_host/ui/#;
    }

    location /logout {
        # redirect to Vouch Proxy for logout
        proxy_pass http://vouch-proxy:9090/logout?url=$scheme://$http_host/ui/#;
    }

    # proxy pass authorized requests to your service
    location / {
        # forward authorized requests to your service protectedapp.yourdomain.com
        ### modify proxy_pass prior to deployment
        ### macOS development (IP from )
        proxy_pass http://192.168.65.2:5000/;
        ### docker-compose deployment
        #proxy_pass http://flask-server:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        ### AUTH REQUEST SET ###
        # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # optinally add X-Vouch-IdP-IdToken, X-Vouch-IdP-AccessToken or X-Vouch-IdP-RefreshToken
        auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;
        auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
        auth_request_set $auth_resp_x_vouch_idp_refreshtoken $upstream_http_x_vouch_idp_refreshtoken;

        ### PROXY SET HEADER ###
        # optionally pass any custom claims you are tracking
        # set user header (usually an email)
        proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;

        # optionally pass the idtoken, accesstoken or refreshtoken
        proxy_set_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
        proxy_set_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;
        proxy_set_header X-Vouch-IdP-RefreshToken $auth_resp_x_vouch_idp_refreshtoken;
    }
}
